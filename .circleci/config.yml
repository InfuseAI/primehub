version: 2.1

orbs:
  slack: circleci/slack@4.4.2
  codecov: codecov/codecov@3.0.0

commands:
  notify_slack:
    description: Notify a Slack channel with a custom message when test failed on master
    steps:
      - slack/notify:
          channel: CBU816QJV
          event: fail
          branch_pattern: master
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Failed: $CIRCLE_USERNAME's build of \n<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n(<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- <$CIRCLE_BUILD_URL|$CIRCLE_JOB> failed"
                  },
                  "accessory": {
                     "type": "image",
                     "image_url": "https://assets.brandfolder.com/q1z07w-113hxk-b29oc1/v/7755924/original/fail-build.png",
                     "alt_text": "CircleCI logo"
                  }
                }
              ]
            }
  create_ticket:
    description: Create a shortcut ticket when test failed on master
    steps:
      - run:
          command: |
            curl -X POST -H "Content-Type:application/json" \
            -H "Shortcut-Token:${SHORTCUT_API_TOKEN}" \
            -d "{ \"name\":\"Automation failed - $(date '+%B-%d-%Y') - ${CIRCLE_JOB} - ${CIRCLE_SHA1}\", \"description\":\"Automation failed - ${CIRCLE_SHA1} - [${CIRCLE_JOB}](${CIRCLE_BUILD_URL})\", \"estimate\":1, \"project_id\":17953, \"story_type\":\"chore\" }" \
            -L "https://api.app.shortcut.com/api/v3/stories"
          when: on_fail
jobs:
  unit_test:
    docker:
      - image: circleci/python:3.8

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: Unit tests
          command: |
            # checkout submodules
            git submodule init && git submodule sync && git submodule update --init --recursive && git submodule status

            # create venv
            python3 -m venv .venv
            source .venv/bin/activate

            # run tests
            cd chart
            pip install --upgrade pip
            pip install wheel
            pip install -r ../vendor/zero-to-jupyterhub-k8s/images/hub/requirements.txt --upgrade
            pip install pytest-cov
            make test

            # upload artifacts
            mkdir -p /tmp/artifacts
            mv htmlcov /tmp/artifacts/
            mv coverage.xml /tmp/artifacts/

      - store_artifacts:
          path: /tmp/artifacts
      - codecov/upload:
          flags: unittests
          file: /tmp/artifacts/coverage.xml
      - notify_slack

  verify_image_list:
    docker:
      - image: circleci/python:3.8

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: Check airgap image list
          command: |
            python3 ci/check_airgap_images.py ./chart/images.yaml ./chart/scripts/bootstrap/crds.yaml ./chart/templates/ph-app-templates
      - notify_slack

  e2e_test:
    description: A parameterized job to run E2E
    parameters:
      machine_resource_class:
        description: "medium, large"
        default: "medium"
        type: string
      primehub_mode:
        description: "ce, ee, deploy"
        default: "ee"
        type: string
      test_type:
        description: "smoke, sanity, regression"
        default: "regression"
        type: string
      feature:
        description: "admin, hub, jobs.edition, schedule, deployment, apps"
        default: ""
        type: string
      target:
        description: "demo.a, k3d"
        default: "k3d"
        type: string
      notify:
        description: "notify slack"
        default: false
        type: boolean
      ticket:
        description: "create ticket on shorcut"
        default: false
        type: boolean

    machine:
      image: ubuntu-2004:202107-02
    resource_class: << parameters.machine_resource_class >>
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: Tests << parameters.feature >> in << parameters.test_type >> on << parameters.primehub_mode >>
          environment:
            PRIMEHUB_MODE: << parameters.primehub_mode >>
            TEST_TYPE: << parameters.test_type >>
            FEATURE: << parameters.feature >>
            TARGET : << parameters.target >>
            K8S_VERSION : << parameters.k8s_version >>
          command: |
            ./ci/ci-test.sh
      - store_artifacts:
          path: ~/project/e2e
      - when:
          condition: << parameters.notify >>
          steps:
            - notify_slack
      - when:
          condition: << parameters.ticket >>
          steps:
            - create_ticket

  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - add_ssh_keys:
          fingerprints:
            - "d0:90:27:9c:dc:28:b5:3e:d8:18:0c:9a:64:46:6f:d4"
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - deps-{{ checksum "requirements.txt" }}

      - run:
          name: publish
          command: |
            ./ci/publish.sh

      - save_cache:
          key: deps-{{ checksum "requirements.txt" }}
          paths:
            - ".venv"

  build_vm:
    machine:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      image: ubuntu-2004:202107-02

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - add_ssh_keys:
          fingerprints:
            - "d0:90:27:9c:dc:28:b5:3e:d8:18:0c:9a:64:46:6f:d4"
      - checkout

      - run:
          name: vm_build
          no_output_timeout: 30m
          command: |
            ./ci/vm/build.sh

workflows:
  version: 2
  release_builds:
    jobs:
      - unit_test
      - verify_image_list
      - e2e_test:
          name: "e2e_smoke_ce"
          primehub_mode: "ce"
          k8s_version: "v1.21.14-k3s1"
          test_type: "smoke"
          notify: true
          filters:
            branches:
              ignore:
                - master
      - e2e_test:
          name: "e2e_smoke_ee"
          primehub_mode: "ee"
          k8s_version: "v1.21.14-k3s1"
          test_type: "smoke"
          notify: true
          filters:
            branches:
              ignore:
                - master
      - e2e_test:
          name: "e2e_sanity_ee"
          primehub_mode: "ee"
          k8s_version: "v1.21.14-k3s1"
          test_type: "sanity"
          notify: true
          filters:
            branches:
              only:
                - master
      - build:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
  scheduled_workflow:
    triggers:
      - schedule:
          cron: "0 21 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e_test:
          name: "e2e_regression_ee_admin_k3d"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "admin"
          ticket: false
      - e2e_test:
          name: "e2e_regression_deploy_admin_k3d"
          primehub_mode: "deploy"
          test_type: "regression"
          feature: "admin"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_hub_k3d"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "hub"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_jobs_k3d"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "jobs"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_deployment_k3d"
          machine_resource_class: "large"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "deployment"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_schedule_k3d"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "schedule"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_apps_k3d"
          machine_resource_class: "large"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "apps"
          ticket: false
      - e2e_test:
          name: "e2e_regression_ee_user_misc_k3d"
          primehub_mode: "ee"
          test_type: "regression"
          feature: "misc"
          ticket: false
