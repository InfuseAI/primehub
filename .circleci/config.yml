version: 2.1

orbs:
  slack: circleci/slack@4.4.2

commands:
  notify_slack:
    description: Notify a Slack channel with a custom message when test failed on master
    steps:
      - slack/notify:
          channel: CBU816QJV
          event: fail
          branch_pattern: master
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Failed: $CIRCLE_USERNAME's build of \n<$CIRCLE_BUILD_URL|$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME>\n(<https://app.circleci.com/pipelines/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME?branch=$CIRCLE_BRANCH|$CIRCLE_BRANCH>) \n- <$CIRCLE_BUILD_URL|$CIRCLE_JOB> failed"
                  },
                  "accessory": {
                     "type": "image",
                     "image_url": "https://assets.brandfolder.com/q1z07w-113hxk-b29oc1/v/7755924/original/fail-build.png",
                     "alt_text": "CircleCI logo"
                  }
                }
              ]
            }
  create_ticket:
    description: Create a clubhouse ticket when test failed on master
    steps:
      - run: 
          command: |
            curl -X POST -H "Content-Type:application/json" \
            -H "Clubhouse-Token:${CLUBHOUSE_API_TOKEN}" \
            -d '{ "name":"Automation failed - ${CIRCLE_JOB}", "description":"Automation failed - <${CIRCLE_BUILD_URL}|${CIRCLE_JOB}>", \
            "estimate":1, "project_id":17953, "story_type":"chore" }' \
            -L "https://api.clubhouse.io/api/v3/stories"
          when: on_fail
jobs:
  unit_test:
    docker:
      - image: circleci/python:3.8

    working_directory: ~/repo

    steps:
      - checkout
      - run:
          name: Unit tests
          command: |
            # checkout submodules
            git submodule init && git submodule sync && git submodule update --init --recursive && git submodule status

            # create venv
            python3 -m venv .venv
            source .venv/bin/activate

            # run tests
            cd chart
            pip install --upgrade pip
            pip install wheel
            pip install -r ../vendor/zero-to-jupyterhub-k8s/images/hub/requirements.txt --upgrade
            pip install pytest-cov
            make test-html

            # upload artifacts
            mkdir -p /tmp/artifacts
            mv htmlcov /tmp/artifacts/

      - store_artifacts:
          path: /tmp/artifacts

      - notify_slack

  e2e:
    machine:
      #image: infuseai/primehub-ci:0.6.3-e2e
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: End-to-end tests
          command: |
            ./ci/ci-test.sh

      - store_artifacts:
          path: ~/project/e2e

      - notify_slack

  e2e_ee:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: End-to-end tests
          environment:
            PRIMEHUB_MODE: ee
          command: |
            ./ci/ci-test.sh

      - store_artifacts:
          path: ~/project/e2e

      - notify_slack

  e2e_installed_ph_daily:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: End-to-end tests
          environment:
            INSTALLED_PH: "true"
            E2E_SCHEDULED: "daily"
          command: |
            ./ci/ci-test.sh
      - store_artifacts:
          path: ~/project/e2e

      - notify_slack

  e2e_regression:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: End-to-end tests
          no_output_timeout: 20m
          environment:
            PRIMEHUB_MODE: ee
            E2E_REGRESSION: "true"
          command: |
            ./ci/ci-test.sh
      - store_artifacts:
          path: ~/project/e2e

      - notify_slack
      - create_ticket 

  e2e_normal_user:
    machine:
      image: ubuntu-1604:202004-01
    steps:
      - checkout
      - run:
          name: Setup
          command: |
            ./ci/setup_env.sh
      - run:
          name: End-to-end tests
          environment:
            PRIMEHUB_MODE: ee
            E2E_NORMAL_USER: "true"
          command: |
            ./ci/ci-test.sh
      - store_artifacts:
          path: ~/project/e2e

      - notify_slack
      - create_ticket 

  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.8

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - add_ssh_keys:
          fingerprints:
            - "d0:90:27:9c:dc:28:b5:3e:d8:18:0c:9a:64:46:6f:d4"
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - deps-{{ checksum "requirements.txt" }}

      - run:
          name: publish
          command: |
            ./ci/publish.sh

      - save_cache:
          key: deps-{{ checksum "requirements.txt" }}
          paths:
            - ".venv"

  build_vm:
    machine:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      image: ubuntu-2004:202101-01

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - add_ssh_keys:
          fingerprints:
            - "d0:90:27:9c:dc:28:b5:3e:d8:18:0c:9a:64:46:6f:d4"
      - checkout

      - run:
          name: vm_build
          no_output_timeout: 30m
          command: |
            ./ci/vm/build.sh

workflows:
  version: 2
  release_builds:
    jobs:
      - unit_test
      - e2e
      - e2e_ee
      - build:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
      - build_vm:
          context: build-vm
          requires:
            - build
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
  daily_workflow:
    triggers:
      - schedule:
          cron: "0 21 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e_normal_user
      - e2e_regression
      - e2e_installed_ph_daily:
          context: e2e-demo-a
