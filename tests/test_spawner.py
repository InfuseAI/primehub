import unittest
import os
from unittest import mock
from kubespawner.objects import make_pod
from kubespawner.spawner import PodReflector
from jupyterhub_profiles import PrimeHubSpawner
from jinja2 import Environment, FileSystemLoader
template_loader = Environment(loader=FileSystemLoader(['tests/fixtures', 'fixtures']))


def mock_spawner():
    spawner = PrimeHubSpawner(_mock=True)
    def mock_render_html(template_name, local_vars):
        template = template_loader.get_template(template_name)
        return template.render(local_vars)
    def mock_resource_usage(group):
        return {'cpu': 0, 'memory': 0, 'gpu': 0}
    spawner.render_html = mock_render_html
    spawner.get_container_resource_usage = mock_resource_usage
    return spawner


class TestGroupsFromCtx(unittest.TestCase):
    # [{'name': 'phusers',
    #    'displayName': 'auto generated by bootstrap',
    #    'quotaCpu': None,
    #    'quotaGpu': 0,
    #    'quotaMemory': None,
    #    'userVolumeCapacity': None,
    #    'projectQuotaCpu': None,
    #    'projectQuotaGpu': 0,
    #    'projectQuotaMemory': None,
    #    'instanceTypes': [{'name': 'cpu-only',
    #                       'displayName': 'cpu-only',
    #                       'description': 'auto generated by bootstrap',
    #                       'spec': {'description': 'auto generated by bootstrap',
    #                                'displayName': 'cpu-only',
    #                                'limits.cpu': 1,
    #                                'limits.memory': '1G',
    #                                'limits.nvidia.com/gpu': 0,
    #                                'requests.cpu': 1,
    #                                'requests.memory': '1G'},
    #                       'global': False}],
    #    'images': [{'name': 'base-notebook',
    #                'displayName': 'base-notebook',
    #                'description': 'auto generated by bootstrap',
    #                'spec': {'description': 'auto generated by bootstrap',
    #                         'displayName': 'base-notebook',
    #                         'url': 'jupyter/base-notebook'},
    #                'global': False}],
    #    'datasets': []},
    #    {'name': 'everyone',
    #     'displayName': None,
    #     'quotaCpu': None,
    #     'quotaGpu': None,
    #     'quotaMemory': None,
    #     'userVolumeCapacity': None,
    #     'projectQuotaCpu': None,
    #     'projectQuotaGpu': None,
    #     'projectQuotaMemory': None,
    #     'instanceTypes': [],
    #     'images': [{'name': 'foo2',
    #                 'displayName': 'foo2',
    #                 'description': '',
    #                 'spec': {'description': '',
    #                          'displayName': 'foo2',
    #                          'pullSecret': 'image-foo',
    #                          'url': 'registry.gitlab.com/infuseai/docker-stacks/pytorch-notebook:06b1f2d8'},
    #                 'global': True},
    #                {'name': 'add-images-foo',
    #                 'displayName': 'foobarbar',
    #                 'description': '',
    #                 'spec': {'description': '',
    #                          'displayName': 'foobarbar',
    #                          'pullSecret': 'image-foo',
    #                          'url': 'registry.gitlab.com/infuseai/docker-stacks/pytorch-notebook:06b1f2d8'},
    #                 'global': True}],
    #     'datasets': []}]

    def test_user_has_no_groups(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            }
        ]}
        with self.assertRaises(Exception) as ex:
            mock_spawner()._groups_from_ctx(context)

        self.assertEqual(str(
            ex.exception), 'Not enough resource limit in your groups, please contact admin.')

    def test_user_has_no_groups_and_valid_everyone_group(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'images': [],
                'instanceTypes': []
            }
        ]}

        result = mock_spawner()._groups_from_ctx(context)

        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['name'], 'everyone')

    def test_user_has_group(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertIn({'global': True, 'name': 'default-image'},
                      result[0]['images'])
        self.assertIn({'global': True,
                       'name': 'default-instance'},
                      result[0]['instanceTypes'])

    def test_user_has_group_with_zero_group_cpu_limit(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': None,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['name'], 'phuser')

    def test_user_has_group_with_zero_personal_cpu_limit(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': 0,
                'quotaMemory': None,
                'projectQuotaCpu': None,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['name'], 'phuser')

    def test_user_has_group_with_zero_group_memory_limit(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': None,
                'projectQuotaCpu': None,
                'projectQuotaMemory': 0,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['name'], 'phuser')

    def test_user_has_group_with_zero_personal_memory_limit(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': 0,
                'projectQuotaCpu': None,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['name'], 'phuser')

    def test_group_without_disply_name(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': 0,
                'projectQuotaCpu': None,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['displayName'], 'phuser')

    def test_group_with_disply_name(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'displayName': 'Default',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': 0,
                'projectQuotaCpu': None,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}
        result = mock_spawner()._groups_from_ctx(context)
        self.assertEqual(len(result), 1)
        self.assertEqual(result[0]['displayName'], 'Default')

    def test_render_options_from_dynamically_properly(self):
        context = {'groups': [
            {
                'name': 'everyone',
                'instanceTypes': [{'name': 'default-instance',
                                   'global': True}],
                'images': [{'name': 'default-image',
                            'global': True}],
                'quotaCpu': 0,
                'quotaMemory': 0,
                'projectQuotaCpu': 0,
                'projectQuotaMemory': 0,
            },
            {
                'name': 'phuser',
                'displayName': 'Default',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'test',
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            },
            {
                'name': 'guest',
                'quotaCpu': None,
                'quotaMemory': 0,
                'projectQuotaCpu': None,
                'projectQuotaMemory': None,
                'instanceTypes': [{'name': 'phuser-instance',
                                   'global': False}],
                'images': [{'name': 'phuser-image',
                            'global': False}],
            }
        ]}

        groups = mock_spawner()._groups_from_ctx(context)
        raised = False
        msg = ''
        try:
            mock_spawner().render_html('groups.html', {'groups': groups})
        except Exception as e:
            raised = True
            msg = e
        self.assertFalse(raised, "Render has exceptions %s" % msg)


class TestInstanceTypeToOverride(unittest.TestCase):
    def test_override_node_selector(self):
        instance_type = {
            'spec': {
                'nodeSelector': "testSelector",
                'requests.cpu': 1,
                'requests.memory': 1,
                'limits.cpu': 1,
                'limits.memory': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertEqual(result['node_selector'], "testSelector")

    def test_override_node_selector_when_not_given(self):
        instance_type = {
            'spec': {
                'requests.cpu': 1,
                'requests.memory': 1,
                'limits.cpu': 1,
                'limits.memory': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertNotIn('node_selector', result.keys())

    def test_override_tolerations(self):
        instance_type = {
            'spec': {
                'tolerations': "testTolerations",
                'requests.cpu': 1,
                'requests.memory': 1,
                'limits.cpu': 1,
                'limits.memory': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertEqual(result['tolerations'], "testTolerations")

    def test_override_tolerations_when_not_given(self):
        instance_type = {
            'spec': {
                'requests.cpu': 1,
                'requests.memory': 1,
                'limits.cpu': 1,
                'limits.memory': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertNotIn('tolerations', result.keys())

    def test_override_when_no_guarantee(self):
        instance_type = {
            'spec': {
                'limits.cpu': 1,
                'limits.memory': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertEqual(result['cpu_guarantee'], 0)
        self.assertEqual(result['mem_guarantee'], '0G')

    def test_override_when_gpu_limit(self):
        instance_type = {
            'spec': {
                'requests.cpu': 0.5,
                'requests.memory': '1G',
                'limits.cpu': 0.5,
                'limits.memory': '1G',
                'limits.nvidia.com/gpu': 1
            }
        }
        result = mock_spawner().instance_type_to_override(instance_type)
        self.assertIn('extra_resource_limits', result.keys())
        self.assertIn('nvidia.com/gpu', result['extra_resource_limits'].keys())
        self.assertEqual(result['extra_resource_limits']['nvidia.com/gpu'], 1)


class TestImageToOverride(unittest.TestCase):

    def setUp(self):
        self.spawner = mock_spawner()

    def test_override_image_when_no_url(self):
        image = {
            'spec': {
            }
        }
        result = self.spawner.image_to_override(image, 0)
        self.assertIsNone(result['image'])

    def test_override_image_url(self):
        image = {
            'spec': {
                'url': "jupyter/test-notebook",
            }
        }
        self.spawner.apply_kubespawner_override(self.spawner.image_to_override(image, 0))
        pod = make_pod(name='test',
            image=self.spawner.image,
            cmd=['jupyterhub-singleuser'],
            port=8888,
            image_pull_policy='IfNotPresent'
        )
        self.assertEqual(pod.spec.containers[0].image, 'jupyter/test-notebook')
        self.assertIsNone(pod.spec.image_pull_secrets)

    def test_override_image_url_for_gpu(self):
        image = {
            'spec': {
                'url': "jupyter/test-notebook-cpu",
                'urlForGpu': "jupyter/test-notebook-gpu"
            }
        }
        self.spawner.apply_kubespawner_override(self.spawner.image_to_override(image, 1))
        pod = make_pod(name='test',
            image=self.spawner.image,
            cmd=['jupyterhub-singleuser'],
            port=8888,
            image_pull_policy='IfNotPresent'
        )
        self.assertEqual(pod.spec.containers[0].image, 'jupyter/test-notebook-gpu')

    def test_override_image_url_for_gpu_without_url_for_gpu(self):
        image = {
            'spec': {
                'url': "jupyter/test-notebook-cpu",
            }
        }
        self.spawner.apply_kubespawner_override(self.spawner.image_to_override(image, 1))
        pod = make_pod(name='test',
            image=self.spawner.image,
            cmd=['jupyterhub-singleuser'],
            port=8888,
            image_pull_policy='IfNotPresent'
        )
        self.assertEqual(pod.spec.containers[0].image, 'jupyter/test-notebook-cpu')

    def test_override_image_pull_secret(self):
        image = {
            'spec': {
                'url': "jupyter/base-notebook",
                'pullSecret': "image-test"
            }
        }
        self.spawner.apply_kubespawner_override(self.spawner.image_to_override(image, 0))
        pod = make_pod(name='test',
            image='jupyter/singleuser:latest',
            image_pull_secret=self.spawner.image_pull_secrets,
            cmd=['jupyterhub-singleuser'],
            port=8888,
            image_pull_policy='IfNotPresent'
        )
        self.assertEqual(pod.spec.image_pull_secrets[0].name, 'image-test')

def mock_for_options_from_form(spawner):
    # fake something i don't really care about it
    spawner.reflectors['pods'] = mock.Mock()
    spawner.singleuser_extra_labels = {}

    # mock: these shuold be called
    spawner.apply_kubespawner_override = mock.Mock()
    spawner.instance_type_to_override = mock.Mock()
    spawner.image_to_override = mock.Mock()

    return spawner


def reset_mock_for_options_from_form(spawner):
    spawner.apply_kubespawner_override.reset_mock()


class TestOptionFromForm(unittest.TestCase):

    def setUp(self):
        self.mock_spwaner = mock_for_options_from_form(mock_spawner())
        self.mock_spwaner._groups = [
            {
                'name': 'phuser',
                'displayName': 'phuser',
                'images': [{'name': 'base-notebook', 'spec': {'url': ''}}],
                'instanceTypes': [{
                    'name': 'cpu',
                    'spec': {
                        'requests.cpu': 1.0,
                        'limits.cpu': 1.0
                    }}],
                'quotaCpu': None,
                'quotaGpu': None,
                'quotaMemory': None,
                'projectQuotaCpu': None,
                'projectQuotaGpu': None,
                'projectQuotaMemory': None
            }
        ]

    def test_option_from_form_when_enable_admission_webhook(self):
        formdata = {
            'instance_type': ['cpu'],
            'group': ['phuser'],
            'image': ['base-notebook']
        }

        # Test unlimited any resources
        option = self.mock_spwaner.options_from_form(formdata)
        self.mock_spwaner.apply_kubespawner_override.assert_called()
        self.mock_spwaner.instance_type_to_override.assert_called_with(
            self.mock_spwaner._groups[0]['instanceTypes'][0])
        self.mock_spwaner.image_to_override.assert_called_with(
            self.mock_spwaner._groups[0]['images'][0], 0)

        # Test CPU Group Limit, Pass
        reset_mock_for_options_from_form(self.mock_spwaner)
        self.mock_spwaner._groups[0]['projectQuotaCpu'] = 2.0
        option = self.mock_spwaner.options_from_form(formdata)
        self.assertIsNotNone(option)

        # Test GPU Group Limit == 0, Pass
        reset_mock_for_options_from_form(self.mock_spwaner)
        self.mock_spwaner._groups[0]['projectQuotaCpu'] = None
        self.mock_spwaner._groups[0]['projectQuotaGpu'] = 0
        option = self.mock_spwaner.options_from_form(formdata)
        self.assertIsNotNone(option)
