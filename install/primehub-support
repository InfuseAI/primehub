#!/bin/bash
# InfuseAI support data collection script
# Author : Dennis Huang
# Version : 2022/10/12 Version 2
HOME="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
ARCHIVE_DIR=$HOME/infuseai_support
LOG_DIR=$HOME/infuseai_support/infuseai_support_logs_$(date +'%Y%m%d%H%M')
TIMESTAMP=$(date +%F-%H-%M-%S)

START() {
echo ""
printf "\E[5;30;47m#################################################################\E[0m\n"
printf "\E[5;30;47m#                                                               #\E[0m\n"
printf "\E[5;30;47m#    Start running InfuseAI support data collection script.     #\E[0m\n"
printf "\E[5;30;47m#                                                               #\E[0m\n"
printf "\E[5;30;47m#################################################################\E[0m\n"
echo ""
}

END() {
echo ""
printf "\E[0;90;102m#################################################################\E[0m\n"
printf "\E[0;90;102m#                                                               #\E[0m\n"
printf "\E[0;90;102m#  InfuseAI support data collection is completed successfully!  #\E[0m\n"
printf "\E[0;90;102m#                                                               #\E[0m\n"
printf "\E[0;90;102m#################################################################\E[0m\n"
echo ""
}

if [ ! "$BASH_VERSION" ] ; then
	echo "-------------------------------------------------------------------------"
    echo "Please do not use $SHELL to run this script, execute it with bash directly." 1>&2
	echo "e.g. bash $0"
    exit 1
fi

#=========================================================================#

# Some bash options
set -o pipefail
# set -x
# set -e

#=========================================================================#

START

# Check host type
OSTYPE=$(echo $OSTYPE)
WSL_DETECT=$(grep -qi microsoft /proc/version ; echo $?)
echo "-------------------------------------------------------------------------"
if [[ $OSTYPE == "linux-gnu" ]] && [[ $WSL_DETECT -eq 1 ]]; then
	echo "This host is a native Linux Server."
	echo "Host type match, moving to next step."
else
	echo "This host is not a native Linux Server."
	echo "This script can only be executed on a native GNU/Linux system."
	exit 1
fi
echo ""

# Check if this script run by root-like account
USER_UID=$(echo $UID)
USER_NAME=$(echo $USER)
SUDO=$(groups $USER_NAME | grep -qo sudo ; echo $?)
echo "Check whether current user has superuser privilege....."
echo ""
if [ $USER_UID != '0' ]; then
	echo "You are not using root account apparently....."
	echo "Check if the current user has sudo privilege....."
		if [[ $SUDO -eq 1 ]]; then
			echo "You do not have the right privilege to perform this action, exit."
			exit 1
		fi
	echo "Identity confirmed, you have root-like privilege, moving to next step."
else
    echo "Identity confirmed, you have root privilege, moving to next step."
fi
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# Create Log folder
echo "-------------------------------------------------------------------------"
if [ ! -d $LOG_DIR ]; then
	echo "Creating Log folder."
	mkdir -p $LOG_DIR
	echo "Folder $LOG_DIR is created."
else
	echo "Log folder $LOG_DIR already exists."
fi
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# System summary report
printf "\E[0;95m=========================================================================\E[0m\n"
echo "Hostname: $(hostname)" | tee -a $LOG_DIR/system_summary_$(hostname).log
echo "IP address: $(hostname -I | awk '{print $1}')" | tee -a $LOG_DIR/system_summary_$(hostname).log
echo "Linux distro name: $(grep -i pretty /etc/os-release | perl -lne 'print for /"([^"]+)"/g' --)" | tee -a $LOG_DIR/system_summary_$(hostname).log
echo "Kernel version: $(uname -r)" | tee -a $LOG_DIR/system_summary_$(hostname).log
echo "System manufacturer: $(sudo dmidecode -s system-manufacturer)" | tee -a $LOG_DIR/system_summary_$(hostname).log
printf "\E[0;95m=========================================================================\E[0m\n"
echo ""

#=========================================================================#

# Check system date and time.
TIME=$(date +%Y/%m/%d-%H:%M:%S)
ANSIBLE_CHECK=$(command -v ansible)
echo "-------------------------------------------------------------------------"
echo "Check system date and time."
if [[ $ANSIBLE_CHECK != "" ]]; then
	read -p "Please input your inventory file full path, skip this step by pressing enter. (e.g. $HOME/.ansible/inventory.yaml) > " inventory_file
	if [[ -f $inventory_file ]]; then
		ansible -i $inventory_file all -m shell -a 'date' -f99 &> $LOG_DIR/ansible_date_$TIMESTAMP.log
		echo "System date log is now logged at $LOG_DIR/ansible_date_$TIMESTAMP.log"
	else
		echo "Will not run ansible command due to empty input or non-existent file."
	fi
else
	echo "Ansible command not found, skipping....."
fi
echo ""
echo "Current System time is:"
echo $TIME
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# Check system resources usage and NVIDIA driver status
SYS_CHECK() {
echo "Log NVIDIA driver status to $LOG_DIR"
if [[ "$(command -v nvidia-smi)" == "" ]]; then
	echo "nvidia-smi command not found, skipping....."
else
	echo "nvidia-smi installed, moving to next step."
	nvidia-smi &> $LOG_DIR/nvidia_driver_$TIMESTAMP.log
	echo "System NVIDIA driver status is now logged at $LOG_DIR/nvidia_driver_$TIMESTAMP.log"
fi
echo ""

echo "Log system resources usage to $LOG_DIR"
if [[ "$(command -v mpstat)" == "" ]]; then
	echo "mpstat command not found, skipping....."
else
	echo "mpstat command installed, capture current system cpu usage."
	mpstat -P ALL &> $LOG_DIR/cpu_usage_$TIMESTAMP.log
	echo "System cpu usage is now logged at $LOG_DIR/cpu_usage_$TIMESTAMP.log"
fi
echo ""

if [[ "$(command -v free)" == "" ]]; then
	echo "free command not found, skipping....."
else
	echo "free command installed, capture current system memory usage."
	free -g &> $LOG_DIR/mem_usage_$TIMESTAMP.log
	echo "System memory usage is now logged at $LOG_DIR/mem_usage_$TIMESTAMP.log"
fi
echo ""

echo "Log system disk usage to $LOG_DIR"
if [[ "$(command -v df)" == "" && "$(command -v lsblk)" == "" ]]; then
	echo "df and lsblk command not found, skipping....."
else
	echo "df and lsblk command installed, capture current system disk usage and partition table."
	df -h &> $LOG_DIR/disk_usage_$TIMESTAMP.log
	lsblk &> $LOG_DIR/part_table_$TIMESTAMP.log
	echo "System disk usage is now logged at $LOG_DIR/disk_usage_$TIMESTAMP.log"
	echo "System partition table is now logged at $LOG_DIR/part_table_$TIMESTAMP.log"
fi
echo ""

echo "Dump system logs to $LOG_DIR"
sudo dmesg -T | tail -1000 &> $LOG_DIR/dmesg_$TIMESTAMP.log
mount &> $LOG_DIR/mount_$TIMESTAMP.log
echo "System log is now logged at $LOG_DIR/dmesg_$TIMESTAMP.log"
echo "Mountpoint log is now logged at $LOG_DIR/mount_$TIMESTAMP.log"
echo "-------------------------------------------------------------------------"
echo ""
}

ANS_SYS_CHECK() {

echo "Log NVIDIA driver status to $LOG_DIR"
if [[ "$(command -v nvidia-smi)" == "" ]]; then
	echo "nvidia-smi command not found, skipping....."
else
	echo "nvidia-smi command installed, capture current nvidia device status."
	ansible -i $inventory_file all -m shell -a 'nvidia-smi' -f99 &> $LOG_DIR/ansible_nvidia_driver_$TIMESTAMP.log
	echo "System NVIDIA driver status is now logged at $LOG_DIR/ansible_nvidia_driver_$TIMESTAMP.log"
fi
echo ""

echo "Log system cpu usage usage to $LOG_DIR"
if [[ "$(command -v mpstat)" == "" ]]; then
	echo "mpstat command not found, skipping....."
else
	echo "mpstat command installed, capture current system cpu usage."
	ansible -i $inventory_file all -m shell -a 'mpstat -P ALL' -f99 &> $LOG_DIR/ansible_cpu_$TIMESTAMP.log
	echo "System cpu usage is now logged at $LOG_DIR/ansible_cpu_$TIMESTAMP.log"
fi
echo ""

echo "Log system memory usage usage to $LOG_DIR"
if [[ "$(command -v free)" == "" ]]; then
	echo "free command not found, skipping....."
else
	echo "free command installed, capture current system memory usage."
	ansible -i $inventory_file all -m shell -a 'free -g' -f99 &> $LOG_DIR/ansible_mem_$TIMESTAMP.log
	echo "System memory usage is now logged at $LOG_DIR/ansible_mem_$TIMESTAMP.log"
fi
echo ""

echo "Log system disk usage to $LOG_DIR"
if [[ "$(command -v df)" == "" && "$(command -v lsblk)" == "" ]]; then
	echo "df and lsblk command not found, skipping....."
else
	echo "df and lsblk command installed, capture current system disk usage and partition table."
	ansible -i $inventory_file all -m shell -a 'df -h' -f99 &> $LOG_DIR/ansible_disk_$TIMESTAMP.log
	ansible -i $inventory_file all -m shell -a 'lsblk' -f99 &> $LOG_DIR/ansible_part_$TIMESTAMP.log
	echo "System disk usage is now logged at $LOG_DIR/ansible_disk_$TIMESTAMP.log"
	echo "System partition table is now logged at $LOG_DIR/ansible_part_$TIMESTAMP.log"
fi
echo ""

echo "Dump system logs to $LOG_DIR"
ansible -i $inventory_file all -m shell -a 'dmesg -T | tail -1000' -b -f99 &> $LOG_DIR/ansible_dmesg_$TIMESTAMP.log
ansible -i $inventory_file all -m shell -a 'mount' -f99 &> $LOG_DIR/ansible_mount_$TIMESTAMP.log
echo "System log is now logged at $LOG_DIR/ansible_dmesg_$TIMESTAMP.log"
echo "Mountpoint log is now logged at $LOG_DIR/ansible_mount_$TIMESTAMP.log"
echo "-------------------------------------------------------------------------"
echo ""
}

echo "-------------------------------------------------------------------------"
echo "Check system resources usage and NVIDIA driver status....."
if [[ $ANSIBLE_CHECK != "" ]]; then
	if [[ ! -f $inventory_file ]]; then
		echo ""
		echo "Will not run ansible command due to empty input or non-existent file."
		echo ""
		SYS_CHECK
	else
		echo ""
		ANS_SYS_CHECK
	fi
else
	echo "Ansible command not found, skipping....."
	echo ""
	SYS_CHECK
fi

#=========================================================================#

# Check system k8s service
K8S() {
CHECK_KUBELET=$(systemctl -la | grep -o kubelet.service 1> /dev/null 2>&1 ; echo $?)
CHECK_RKE=$(docker ps -a 2> /dev/null | grep -o kubelet 1> /dev/null 2>&1 ; echo $?)
CHECK_KUBELET_SERVICE=$(systemctl is-active kubelet.service)
CHECK_DOCKER_SERVICE=$(systemctl is-active docker.service)
echo "-------------------------------------------------------------------------"
if [[ "$(command -v docker)" != "" && $CHECK_DOCKER_SERVICE == "active" ]]; then
	echo "Docker installed, moving to next step."
	if [[ $CHECK_KUBELET -eq 0 && $CHECK_RKE -eq 1 ]]; then
		echo "This host has Kubelet service installed."
		K8S_TYPE=KUBELET
	elif [[ $CHECK_KUBELET -eq 1 && $CHECK_RKE -eq 0 ]]; then
		echo "This host has RKE service installed."
		K8S_TYPE=RKE
	else
		echo "Cannot detect k8s service on this host, exit."
		exit 1
	fi
else
	echo "Docker command not found, skipping....."
fi

if [[ $K8S_TYPE == "RKE" ]]; then
	echo ""
	echo "Dump kubelet logs to $LOG_DIR"
	docker logs kubelet --tail 1000 &> $LOG_DIR/kubelet_service_$TIMESTAMP.log
	echo "Kubelet service log is now logged at $LOG_DIR/kubelet_service_$TIMESTAMP.log"
elif [[ $K8S_TYPE == "KUBELET"  && $CHECK_KUBELET_SERVICE == "active" ]]; then
	echo ""
	echo "Dump kubelet logs to $LOG_DIR"
	systemctl status kubelet.service -l &> $LOG_DIR/kubelet_status_$TIMESTAMP.log
	journalctl -u kubelet.service -n 1000 &> $LOG_DIR/kubelet_service_$TIMESTAMP.log
	echo "Kubelet status log is now logged at $LOG_DIR/kubelet_status_$TIMESTAMP.log"
	echo "Kubelet service log is now logged at $LOG_DIR/kubelet_service_$TIMESTAMP.log"
fi
echo "-------------------------------------------------------------------------"
echo ""
}

K8S

#=========================================================================#

# Check Kubernetes service status
echo "-------------------------------------------------------------------------"
PVC_LIST=$(kubectl get pvc -A 2> /dev/null)
PV_LIST=$(kubectl get pv -A 2> /dev/null)
DEPLOY_LIST=$(kubectl get deploy -A 2> /dev/null)
SVC_LIST=$(kubectl get svc -A 2> /dev/null)
if [[ "$(command -v kubectl)" == "" ]]; then
	echo "Kubectl command not found, skipping....."
else
	echo "Kubectl installed, Check Kubernetes cluster status."
	kubectl get nodes -o wide &> $LOG_DIR/kubernetes_node_$TIMESTAMP.log
	kubectl get pods -A -o wide &> $LOG_DIR/kubernetes_pod_$TIMESTAMP.log
	kubectl get pvc -A &> $LOG_DIR/kubernetes_pvc_$TIMESTAMP.log
	kubectl get pv -A &> $LOG_DIR/kubernetes_pv_$TIMESTAMP.log
	kubectl get deploy -A &> $LOG_DIR/kubernetes_deploy_$TIMESTAMP.log
	kubectl get svc -A &> $LOG_DIR/kubernetes_svc_$TIMESTAMP.log
	echo "Kubernetes node status log is now logged at $LOG_DIR/kubernetes_node_$TIMESTAMP.log"
	echo "Kubernetes pod status log is now logged at $LOG_DIR/kubernetes_pod_$TIMESTAMP.log"
	echo "Kubernetes pvc status log is now logged at $LOG_DIR/kubernetes_pvc_$TIMESTAMP.log"
	echo "Kubernetes pv status log is now logged at $LOG_DIR/kubernetes_pv_$TIMESTAMP.log"
	echo "Kubernetes deploy status log is now logged at $LOG_DIR/kubernetes_deploy_$TIMESTAMP.log"
	echo "Kubernetes svc status log is now logged at $LOG_DIR/kubernetes_svc_$TIMESTAMP.log"
fi
echo ""

if [[ "$(command -v helm)" == "" ]]; then
	echo "Helm command not found, skipping....."
else
	echo "Helm installed, list releases of charts."
	helm ls -Aa &> $LOG_DIR/helm_$TIMESTAMP.log
	echo "Helm charts list log is now logged at $LOG_DIR/helm_$TIMESTAMP.log"
fi
echo ""

NOT_READY_NODE=$(kubectl get nodes 2> /dev/null | grep NotReady | awk {'print $1'})
if [[ $NOT_READY_NODE == "" ]]; then
	echo "No node is in "not ready" status, skipping....."
else
	echo "Not ready node found, list node status."
	kubectl get nodes | grep NotReady | awk {'print $1'} | xargs kubectl describe node &> $LOG_DIR/kubernetes_not_ready_node_$TIMESTAMP.log
	echo "Kubernetes NotReady node status log is now logged at $LOG_DIR/kubernetes_not_ready_node_$TIMESTAMP.log"
fi
echo ""

NOT_RUNNING_POD=$(kubectl get pod -o json --all-namespaces 2> /dev/null | jq -j '.items[] |  "\(.metadata.name), \(.metadata.namespace), \(.status.phase)\n"' 2> /dev/null | grep -v Running | grep -v Completed | grep -v Succeeded)
if [[ $NOT_RUNNING_POD == "" ]]; then
	echo "No pod is in "not ready" status, skipping....."
else
	echo "Not ready pod found, list pod status."
	echo $NOT_RUNNING_POD &> $LOG_DIR/kubernetes_not_ready_pod_$TIMESTAMP.log
	echo "Kubernetes NotReady pod status log is now logged at $LOG_DIR/kubernetes_not_ready_pod_$TIMESTAMP.log"
fi
echo ""

NOT_READY_DEPLOY=$(kubectl get deploy -o json --all-namespaces 2> /dev/null | jq -j '.items[] | "\(.metadata.name), \(.metadata.namespace), \(.status.unavailableReplicas)\n"' 2> /dev/null | grep -v null)
if [[ $NOT_READY_DEPLOY == "" ]]; then
	echo "No deployment is unavailable, skipping....."
else
	echo "Unavailable deployment found, list deployment status."
	echo $NOT_READY_DEPLOY &> $LOG_DIR/kubernetes_unavailable_deploy_$TIMESTAMP.log
	echo "Kubernetes NotReady pod status log is now logged at $LOG_DIR/kubernetes_unavailable_deploy_$TIMESTAMP.log"
fi
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# Check Ceph service status
OSD_POOL_NAME=replicapool
echo "-------------------------------------------------------------------------"
if [[ "$(command -v kubectl-ceph)" == "" ]]; then
	echo "Kubectl-ceph command not found, skipping....."
else
	echo "Kubectl-ceph installed, Check Ceph cluster status."
	kubectl ceph status &> $LOG_DIR/ceph_status_$TIMESTAMP.log
	kubectl ceph health &> $LOG_DIR/ceph_health_$TIMESTAMP.log
	kubectl ceph osd status &> $LOG_DIR/ceph_osd_status_$TIMESTAMP.log
	kubectl ceph osd tree &> $LOG_DIR/ceph_osd_tree_$TIMESTAMP.log
	kubectl ceph pg dump &> $LOG_DIR/ceph_pg_dump_$TIMESTAMP.log
	kubectl ceph df &> $LOG_DIR/ceph_df_$TIMESTAMP.log
	kubectl ceph osd df tree &> $LOG_DIR/ceph_osd_df_tree_$TIMESTAMP.log
	kubectl rbd ls $OSD_POOL_NAME &> $LOG_DIR/ceph_rbd_pool_$TIMESTAMP.log
	kubectl rbd device list &> $LOG_DIR/ceph_rbd_device_$TIMESTAMP.log
	echo "Ceph cluster status log is now logged at $LOG_DIR/ceph_status_$TIMESTAMP.log"
	echo "Ceph cluster health log is now logged at $LOG_DIR/ceph_health_$TIMESTAMP.log"
	echo "Ceph osd status log is now logged at $LOG_DIR/ceph_osd_status_$TIMESTAMP.log"
	echo "Ceph osd tree log is now logged at $LOG_DIR/ceph_osd_tree_$TIMESTAMP.log"
	echo "Ceph pg dump log is now logged at $LOG_DIR/ceph_pg_dump_$TIMESTAMP.log"
	echo "Ceph cluster usage log is now logged at $LOG_DIR/ceph_df_$TIMESTAMP.log"
	echo "Ceph osd usage log is now logged at $LOG_DIR/ceph_osd_df_tree_$TIMESTAMP.log"
	echo "Ceph rbd volume list is now logged at $LOG_DIR/ceph_rbd_pool_$TIMESTAMP.log"
	echo "Ceph rbd device list is now logged at $LOG_DIR/ceph_rbd_device_$TIMESTAMP.log"
fi
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# Check PrimeHub service status
echo "-------------------------------------------------------------------------"
OSD_POOL_NAME=replicapool
if [[ "$(command -v kubectl-primehub)" == "" ]]; then
	echo "Kubectl-primehub command not found, skipping....."
else
	echo "Kubectl-primehub installed, Check PrimeHub status."
	kubectl primehub version &> $LOG_DIR/primehub_version_$TIMESTAMP.log
	#Command usage: kubectl primehub [notebook|job|gitsync|nfs|image-builder|deploy|system]
	kubectl primehub notebook &> $LOG_DIR/primehub_notebook_$TIMESTAMP.log
	kubectl primehub job &> $LOG_DIR/primehub_job_$TIMESTAMP.log
	kubectl primehub nfs &> $LOG_DIR/primehub_nfs_$TIMESTAMP.log
	kubectl primehub deploy &> $LOG_DIR/primehub_deploy_$TIMESTAMP.log
	kubectl primehub system &> $LOG_DIR/primehub_system_$TIMESTAMP.log
	echo "Collect PrimeHub diagnostic logs, please wait....."
	cd $LOG_DIR
	kubectl primehub diagnose --path $LOG_DIR
	echo "Done."
	cd $HOME
	echo ""
	echo "PrimeHub version log is now logged at $LOG_DIR/primehub_version_$TIMESTAMP.log"
	echo "PrimeHub notebook list is now logged at $LOG_DIR/primehub_notebook_$TIMESTAMP.log"
	echo "PrimeHub job list is now logged at $LOG_DIR/primehub_job_$TIMESTAMP.log"
	echo "PrimeHub nfs list is now logged at $LOG_DIR/primehub_nfs_$TIMESTAMP.log"
	echo "PrimeHub deploy list is now logged at $LOG_DIR/primehub_deploy_$TIMESTAMP.log"
	echo "PrimeHub system list is now logged at $LOG_DIR/primehub_system_$TIMESTAMP.log"
	echo "PrimeHub diagnose log is now stored at $LOG_DIR/primehub-log-$(date +'%Y%m%d%H%M').tgz"
fi
echo "-------------------------------------------------------------------------"
echo ""

#=========================================================================#

# Summary
FILE_NAME="infuseai-support-log-$(date +'%Y%m%d%H%M')"
echo "-------------------------------------------------------------------------"
echo "Compressing logs....."
cd $LOG_DIR
tar czf $ARCHIVE_DIR/$FILE_NAME.tgz * 1> /dev/null 2>&1
cd $HOME
echo "Done."
echo "-------------------------------------------------------------------------"
echo ""

echo "-------------------------------------------------------------------------"
echo "Logs folder: $LOG_DIR"
echo "Log archive: $(realpath $ARCHIVE_DIR/$FILE_NAME.tgz)"
echo "Please send the log archive to support engineer for further analysis."
echo "-------------------------------------------------------------------------"

END

exit 0